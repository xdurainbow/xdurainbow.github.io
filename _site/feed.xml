<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.3">Jekyll</generator><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" /><updated>2018-09-14T00:06:43+08:00</updated><id>/</id><title type="html">逍遥</title><subtitle>Write an awesome description for your new site here. You can edit this line in _config.yml. It will appear in your document head meta (for Google search results) and in your feed.xml site description.</subtitle><entry><title type="html">Python内置函数</title><link href="/python/2018/09/13/Python%E5%86%85%E7%BD%AE%E5%87%BD%E6%95%B0.html" rel="alternate" type="text/html" title="Python内置函数" /><published>2018-09-13T00:28:09+08:00</published><updated>2018-09-13T00:28:09+08:00</updated><id>/python/2018/09/13/Python%E5%86%85%E7%BD%AE%E5%87%BD%E6%95%B0</id><content type="html" xml:base="/python/2018/09/13/Python%E5%86%85%E7%BD%AE%E5%87%BD%E6%95%B0.html">&lt;h1 id=&quot;python内置函数&quot;&gt;Python内置函数&lt;/h1&gt;
&lt;h2 id=&quot;abs&quot;&gt;abs()&lt;/h2&gt;
&lt;h3 id=&quot;描述&quot;&gt;描述&lt;/h3&gt;
&lt;p&gt;求数字的绝对值&lt;/p&gt;

&lt;h3 id=&quot;使用方法&quot;&gt;使用方法&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;abs(x)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;示例&quot;&gt;示例&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;print &quot;abs(-2): &quot;, abs(-2)
&amp;gt;abs(-2):  2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;all&quot;&gt;all()&lt;/h2&gt;
&lt;h3 id=&quot;描述-1&quot;&gt;描述&lt;/h3&gt;
&lt;p&gt;判断给定的可迭代参数iterable中的所有元素是否都为TRUE（除了0、空、FALSE），如果是返回True，否则返回False。函数等价于：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;def all(iterable):
	for element in iterable:
		if not element:
			return False
	return True
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&amp;lt;font color=#f00&amp;gt;Python 2.5以上版本适用&amp;lt;/font&amp;gt;&lt;/p&gt;

&lt;h3 id=&quot;使用方法-1&quot;&gt;使用方法&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;all(iterable)
:iterable——元组或列表
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;示例-1&quot;&gt;示例&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;print all([&quot;a&quot;, &quot;b&quot;, &quot;c&quot;])
&amp;gt;True	# list元素都不为空
print all([&quot;a&quot;, &quot;b&quot;, &quot;&quot;])
&amp;gt;False	# list元素存在为空
print all((&quot;a&quot;, &quot;b&quot;, &quot;c&quot;))
&amp;gt;True	# tuple元素都不为空
print all((&quot;a&quot;, &quot;b&quot;, &quot;&quot;))
&amp;gt;False	# tuple元素存在为空
print all((0, 1, 2, 3))
&amp;gt;False	# tuple元素存在为0
print all([1, 2, 3])
&amp;gt;True	# list元素均不为0
print all(())
&amp;gt;True	# tuple本身为空
print all([])
&amp;gt;True	# list本身为空
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;注意最后两个，当iterable本身为空时，返回值为True&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;any&quot;&gt;any()&lt;/h2&gt;
&lt;h3 id=&quot;描述-2&quot;&gt;描述&lt;/h3&gt;
&lt;p&gt;判断给定的可迭代参数iterable中的所有元素是否都为FALSE（0、空、FALSE），如果是返回False，否则返回True&lt;/p&gt;

&lt;h3 id=&quot;提示&quot;&gt;提示&lt;/h3&gt;
&lt;p&gt;any()和all()的含义相反，只要有一个元素为Ture，返回值即为True，而all()则需要所有的元素都为True，这里不再详细介绍，只举几个例子&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;print any([&quot;a&quot;, &quot;b&quot;, &quot;&quot;])
&amp;gt;True	# 存在不为空的元素
print any((0, &quot;&quot;, False))
&amp;gt;False	# 所有元素均为空、0、False
print any(())
&amp;gt;False	# 这里空元组或列表返回值为False
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;basestring&quot;&gt;basestring()&lt;/h2&gt;
&lt;h3 id=&quot;描述-3&quot;&gt;描述&lt;/h3&gt;
&lt;p&gt;它是str和unicode的超类，也是抽象类，因此不能被调用和实例化，但可以被用来判断一个对象是否为str或者Unicode的实例。&lt;code class=&quot;highlighter-rouge&quot;&gt;isinstance(obj, basestring)&lt;/code&gt;等价于&lt;code class=&quot;highlighter-rouge&quot;&gt;isinstance(obj, (str, unicode))&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;示例-2&quot;&gt;示例&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;print isinstance(&quot;hello&quot;, str)
&amp;gt;True
print isinstance(&quot;hello&quot;, basestring)
&amp;gt;True
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;bin&quot;&gt;bin()&lt;/h2&gt;
&lt;h3 id=&quot;描述-4&quot;&gt;描述&lt;/h3&gt;
&lt;p&gt;返回一个整数int或者长整数long int的二进制表示&lt;/p&gt;

&lt;h3 id=&quot;使用方法-2&quot;&gt;使用方法&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;bin(x)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;示例-3&quot;&gt;示例&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;print bin(-1)
&amp;gt;-0b1
print bin(8)
&amp;gt;0b1000
print bin(1000)
&amp;gt;0b1111101000
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;bool&quot;&gt;bool()&lt;/h2&gt;
&lt;h3 id=&quot;描述-5&quot;&gt;描述&lt;/h3&gt;
&lt;p&gt;将给定的参数转换为布尔类型，如果没有参数，返回False。&lt;strong&gt;bool是int的子类。&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;使用方法-3&quot;&gt;使用方法&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;bool(x)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;示例-4&quot;&gt;示例&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;print bool()
&amp;gt;False
print bool(0)
&amp;gt;False
print bool(1)
&amp;gt;True
print bool(5)
&amp;gt;True	# 任何非零值，转换为布尔类型均为True
print issubclass(bool, int)
&amp;gt;True
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;bytearray&quot;&gt;bytearray()&lt;/h2&gt;

&lt;h2 id=&quot;callable&quot;&gt;callable()&lt;/h2&gt;

&lt;h2 id=&quot;chr&quot;&gt;chr()&lt;/h2&gt;
&lt;h3 id=&quot;描述-6&quot;&gt;描述&lt;/h3&gt;
&lt;p&gt;对于（0，255）之间的整数，返回其对应的字符&lt;/p&gt;

&lt;h3 id=&quot;使用方法-4&quot;&gt;使用方法&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;chr(i)
:i——八进制、十进制或十六进制的整数
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;示例-5&quot;&gt;示例&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;print chr(060), chr(65), chr(0x61)
&amp;gt; 0 A a
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name></name></author><summary type="html">Python内置函数 abs() 描述 求数字的绝对值</summary></entry><entry><title type="html">历史朝代</title><link href="/%E5%8E%86%E5%8F%B2/2018/08/08/%E5%8E%86%E5%8F%B2.html" rel="alternate" type="text/html" title="历史朝代" /><published>2018-08-08T00:55:09+08:00</published><updated>2018-08-08T00:55:09+08:00</updated><id>/%E5%8E%86%E5%8F%B2/2018/08/08/%E5%8E%86%E5%8F%B2</id><content type="html" xml:base="/%E5%8E%86%E5%8F%B2/2018/08/08/%E5%8E%86%E5%8F%B2.html">&lt;h1 id=&quot;夏&quot;&gt;&lt;strong&gt;&lt;em&gt;夏&lt;/em&gt;&lt;/strong&gt;&lt;/h1&gt;
&lt;h2 id=&quot;约-2070-1600&quot;&gt;约-2070~-1600&lt;/h2&gt;

&lt;h1 id=&quot;商&quot;&gt;商&lt;/h1&gt;
&lt;h2 id=&quot;约-1600-1046&quot;&gt;约-1600~-1046&lt;/h2&gt;

&lt;h1 id=&quot;周&quot;&gt;周&lt;/h1&gt;
&lt;h2 id=&quot;西周-1046-770&quot;&gt;西周（-1046~-770）&lt;/h2&gt;
&lt;h2 id=&quot;东周-770-256&quot;&gt;东周（-770~-256）&lt;/h2&gt;

&lt;h1 id=&quot;秦&quot;&gt;秦&lt;/h1&gt;
&lt;h2 id=&quot;-221-207&quot;&gt;-221~-207&lt;/h2&gt;

&lt;h1 id=&quot;汉&quot;&gt;汉&lt;/h1&gt;
&lt;h2 id=&quot;西汉-2068&quot;&gt;西汉（-206~8）&lt;/h2&gt;
&lt;h2 id=&quot;新朝823&quot;&gt;新朝（8~23）&lt;/h2&gt;
&lt;h2 id=&quot;东汉25220&quot;&gt;东汉（25~220）&lt;/h2&gt;

&lt;h1 id=&quot;三国&quot;&gt;三国&lt;/h1&gt;
&lt;h2 id=&quot;曹魏220265&quot;&gt;曹魏（220~265）&lt;/h2&gt;
&lt;h2 id=&quot;蜀汉221263&quot;&gt;蜀汉（221~263）&lt;/h2&gt;
&lt;h2 id=&quot;东吴222280&quot;&gt;东吴（222~280）&lt;/h2&gt;

&lt;h1 id=&quot;晋&quot;&gt;晋&lt;/h1&gt;
&lt;h2 id=&quot;西晋265316&quot;&gt;西晋（265~316）&lt;/h2&gt;
&lt;h2 id=&quot;东晋317420&quot;&gt;东晋（317~420）&lt;/h2&gt;

&lt;h1 id=&quot;五胡十六国&quot;&gt;五胡十六国&lt;/h1&gt;
&lt;h2 id=&quot;304439&quot;&gt;304~439&lt;/h2&gt;

&lt;h1 id=&quot;南北朝&quot;&gt;南北朝&lt;/h1&gt;
&lt;h2 id=&quot;南朝&quot;&gt;南朝&lt;/h2&gt;
&lt;h3 id=&quot;刘宋420479&quot;&gt;刘宋（420~479）&lt;/h3&gt;
&lt;h3 id=&quot;萧齐478502&quot;&gt;萧齐（478~502）&lt;/h3&gt;
&lt;h3 id=&quot;萧梁502557&quot;&gt;萧梁（502～557）&lt;/h3&gt;
&lt;h3 id=&quot;南陈557589&quot;&gt;南陈（557~589）&lt;/h3&gt;
&lt;h2 id=&quot;北朝&quot;&gt;北朝&lt;/h2&gt;
&lt;h3 id=&quot;北魏386534&quot;&gt;北魏（386~534）&lt;/h3&gt;
&lt;h3 id=&quot;东魏534550&quot;&gt;东魏（534~550）&lt;/h3&gt;
&lt;h3 id=&quot;西魏535556&quot;&gt;西魏（535~556）&lt;/h3&gt;
&lt;h3 id=&quot;北齐550577&quot;&gt;北齐（550~577）&lt;/h3&gt;
&lt;h3 id=&quot;北周577581&quot;&gt;北周（577~581）&lt;/h3&gt;

&lt;h1 id=&quot;隋&quot;&gt;隋&lt;/h1&gt;
&lt;h2 id=&quot;581618&quot;&gt;581~618&lt;/h2&gt;

&lt;h1 id=&quot;唐&quot;&gt;唐&lt;/h1&gt;
&lt;h2 id=&quot;618907&quot;&gt;618~907&lt;/h2&gt;

&lt;h1 id=&quot;五代十国&quot;&gt;五代十国&lt;/h1&gt;

&lt;h1 id=&quot;宋&quot;&gt;宋&lt;/h1&gt;
&lt;h2 id=&quot;北宋9601127&quot;&gt;北宋（960~1127）&lt;/h2&gt;
&lt;h2 id=&quot;南宋11271279&quot;&gt;南宋（1127~1279）&lt;/h2&gt;

&lt;h1 id=&quot;元&quot;&gt;元&lt;/h1&gt;
&lt;h2 id=&quot;12061368&quot;&gt;1206~1368&lt;/h2&gt;

&lt;h1 id=&quot;明&quot;&gt;明&lt;/h1&gt;
&lt;h2 id=&quot;13681644&quot;&gt;1368~1644&lt;/h2&gt;

&lt;h1 id=&quot;清&quot;&gt;清&lt;/h1&gt;
&lt;h2 id=&quot;16161911&quot;&gt;1616~1911&lt;/h2&gt;</content><author><name></name></author><summary type="html">夏 约-2070~-1600</summary></entry><entry><title type="html">LeetCode</title><link href="/leetcode/2018/08/02/LeetCode_1_Two_Sum.html" rel="alternate" type="text/html" title="LeetCode" /><published>2018-08-02T00:55:09+08:00</published><updated>2018-08-02T00:55:09+08:00</updated><id>/leetcode/2018/08/02/LeetCode_1_Two_Sum</id><content type="html" xml:base="/leetcode/2018/08/02/LeetCode_1_Two_Sum.html">&lt;h1 id=&quot;题目描述&quot;&gt;题目描述&lt;/h1&gt;
&lt;h2 id=&quot;1two-sum&quot;&gt;1.Two Sum&lt;/h2&gt;
&lt;p&gt;Given an array of integers, return &lt;strong&gt;indices&lt;/strong&gt; of the two numbers such that they add up to a specific target.&lt;/p&gt;

&lt;p&gt;You may assume that each input would have &lt;strong&gt;exactly&lt;/strong&gt; one solution, and you may not use the same element twice.&lt;/p&gt;

&lt;p&gt;Example:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Given nums = [2, 7, 11, 15], target = 9,
Because nums[0] + nums[1] = 2 + 7 = 9,
return [0, 1].
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;题目解析&quot;&gt;题目解析&lt;/h1&gt;
&lt;p&gt;给定一个整数数组和一个目标值，求解数组中的和为目标值的两个数的索引值。&lt;/p&gt;

&lt;h2 id=&quot;实现1&quot;&gt;实现1&lt;/h2&gt;
&lt;p&gt;首先想到最简单的办法就是遍历这个数组，去判断当前遍历到的两个数的和是否为目标值：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;def twoSum(nums, target):
	&quot;&quot;&quot;
	:type nums: List[int]
	:type target: int
	:rtype: List[int]
	&quot;&quot;&quot;
	for i in range(len(nums)):
		for j in range(i+1, len(nums)):
			if nums[i] + nums[j] == target:
				return [i, j]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;一遍直接AC。LeetCode上面有个功能，可以查看时间复杂度和空间复杂度以及这道题你击败了多少人。看了下结果：Runtime：&lt;code class=&quot;highlighter-rouge&quot;&gt;3152ms&lt;/code&gt;，击败了&lt;code class=&quot;highlighter-rouge&quot;&gt;16.06%&lt;/code&gt;的人。&lt;/p&gt;

&lt;h2 id=&quot;改进思考&quot;&gt;改进思考&lt;/h2&gt;
&lt;p&gt;由于是最容易想到的最简单的也是最暴力的方法，效率显然是很low的，两个for循环，复杂度直接到了O(n&lt;sup&gt;2&lt;/sup&gt;)。再分析下题目，我们有&lt;strong&gt;exactly&lt;/strong&gt;一个解，那么如果这个数组是有序的，我们分别从数组的开始（i）和结尾（j）向中间遍历，如果两个数的和大于目标值，则i++，否则j–，直至找到那个唯一的解，这样只遍历了一遍数组，复杂度为O(n)，排序的算法复杂度为O(nlogn)，因此最终复杂度为O(nlogn)，远小于O(n&lt;sup&gt;2&lt;/sup&gt;)。&lt;/p&gt;

&lt;h2 id=&quot;实现2&quot;&gt;实现2&lt;/h2&gt;
&lt;p&gt;首先将nums&lt;strong&gt;&lt;em&gt;拷贝&lt;/em&gt;&lt;/strong&gt;一份，然后对nums进行排序，按上述方法找到哪两个数的和为目标值，然后在之前备份的数组中查看这两个数值的索引。这里需要注意的是，由于数组中可能有重复值，例如给定数组为[3,3]，目标值为6，按上述方法返回的是[0,0]，而不是[0,1]。因此在找到第一个索引值后，把第一个数改变下，只要不和第二个数相等即可，&lt;code class=&quot;highlighter-rouge&quot;&gt;这里采取的方法是设置为第二个值+1，见倒数第三行&lt;/code&gt;，这样就不会在求第二个索引值时受影响。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import copy

def twoSum(nums, target):
    &quot;&quot;&quot;
    :type nums: List[int]
    :type target: int
    :rtype: List[int]
    &quot;&quot;&quot;
    num = copy.deepcopy(nums)
    nums.sort()
    i = 0
    j = len(nums) - 1
    while(nums[i] + nums[j] != target):
        if nums[i] + nums[j] &amp;gt; target:
            j -= 1
        else:
            i += 1
    a = num.index(nums[i])
    num[a] = nums[j] + 1
    b = num.index(nums[j])
    return [a, b]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;python中的拷贝&quot;&gt;Python中的拷贝&lt;/h2&gt;
&lt;p&gt;Python中创建一个对象，把他赋值给另一个对象时，并没有拷贝这个对象，而是拷贝对象的引用。&lt;/p&gt;

&lt;p&gt;在下面的例子中以此为基础（结果是在2.7.10版本上得出的）&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import copy
a = [1, 2, [1, 2]]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h3 id=&quot;1直接赋值&quot;&gt;1、直接赋值&lt;/h3&gt;
&lt;p&gt;只是传递对象的引用，原list改变之后，拷贝的list也会跟着变&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;b = a
a[0] = 0
print a ====&amp;gt; [0, 2, [1, 2]]
print b ====&amp;gt; [0, 2, [1, 2]]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;2浅拷贝&quot;&gt;2、浅拷贝&lt;/h3&gt;
&lt;p&gt;没有拷贝子对象，原list改变之后，其中的子对象会改变。&lt;/p&gt;

&lt;p&gt;这里对a[0]进行改变的时候，b[0]不会跟着变，但是改变a的子对象a[2]的内容时，b是会跟着变的。&lt;strong&gt;注意：如果直接设置a[2] = 0时，b是不会变的，因为这里并不是在处理他的子对象&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;b = copy.copy(a)
a[0] = 0
a[2][0] = 0
print a ====&amp;gt; [0, 2, [0, 2]]
print b ====&amp;gt; [1, 2, [0, 2]]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;3深拷贝&quot;&gt;3、深拷贝&lt;/h3&gt;
&lt;p&gt;包含对象里面的子对象的拷贝，所以原list的任何改变不会影响到拷贝的list&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;b = copy.deepcopy(a)
a[0] = 0
a[2][0] = 0
print a ====&amp;gt; [0, 2, [0, 2]]
print b ====&amp;gt; [1, 2, [1, 2]]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name></name></author><summary type="html">题目描述 1.Two Sum Given an array of integers, return indices of the two numbers such that they add up to a specific target.</summary></entry><entry><title type="html">Welcome to Jekyll!</title><link href="/jekyll/update/2018/07/31/welcome-to-jekyll.html" rel="alternate" type="text/html" title="Welcome to Jekyll!" /><published>2018-07-31T22:22:49+08:00</published><updated>2018-07-31T22:22:49+08:00</updated><id>/jekyll/update/2018/07/31/welcome-to-jekyll</id><content type="html" xml:base="/jekyll/update/2018/07/31/welcome-to-jekyll.html">&lt;p&gt;中文测试&lt;/p&gt;

&lt;p&gt;You’ll find this post in your &lt;code class=&quot;highlighter-rouge&quot;&gt;_posts&lt;/code&gt; directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run &lt;code class=&quot;highlighter-rouge&quot;&gt;jekyll serve&lt;/code&gt;, which launches a web server and auto-regenerates your site when a file is updated.&lt;/p&gt;

&lt;p&gt;To add new posts, simply add a file in the &lt;code class=&quot;highlighter-rouge&quot;&gt;_posts&lt;/code&gt; directory that follows the convention &lt;code class=&quot;highlighter-rouge&quot;&gt;YYYY-MM-DD-name-of-post.ext&lt;/code&gt; and includes the necessary front matter. Take a look at the source for this post to get an idea about how it works.&lt;/p&gt;

&lt;p&gt;Jekyll also offers powerful support for code snippets:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Hi, &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Tom'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#=&amp;gt; prints 'Hi, Tom' to STDOUT.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Check out the &lt;a href=&quot;https://jekyllrb.com/docs/home&quot;&gt;Jekyll docs&lt;/a&gt; for more info on how to get the most out of Jekyll. File all bugs/feature requests at &lt;a href=&quot;https://github.com/jekyll/jekyll&quot;&gt;Jekyll’s GitHub repo&lt;/a&gt;. If you have questions, you can ask them on &lt;a href=&quot;https://talk.jekyllrb.com/&quot;&gt;Jekyll Talk&lt;/a&gt;.&lt;/p&gt;</content><author><name></name></author><summary type="html">中文测试</summary></entry></feed>